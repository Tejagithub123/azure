---
- name: Create Azure VM using Terraform
  hosts: localhost
  gather_facts: false
  vars_files:
    - vault.yml  

  vars:
    tf_dir: "/tmp/{{ vm.name }}"
    plugin_dir: "/root/terraform-plugins"
    azurerm_version: "3.0.2"
    spring_backend_url: "http://192.168.1.15:8090/api/vms/{{ vm.vmId }}/callback"

  pre_tasks:
    - name: Vérifier que Terraform est installé
      command: terraform version
      register: terraform_check
      ignore_errors: true

    - name: Stop si Terraform n'est pas installé
      fail:
        msg: >
          Terraform n'est pas installé ou pas dans le PATH.
          Veuillez installer Terraform sur ce système.
      when: terraform_check.rc != 0

    - name: Créer le dossier .ssh s'il n'existe pas
      file:
        path: /root/.ssh
        state: directory
        mode: '0700'
        owner: root
        group: root

    - name: Ajouter github.com aux known_hosts
      known_hosts:
        name: github.com
        key: "{{ lookup('pipe', 'ssh-keyscan github.com') }}"
        path: /root/.ssh/known_hosts
        state: present

  tasks:
    - name: Afficher les variables reçues
      debug:
        msg: |
          Appel web →
            Nom VM   = {{ vm.name }}
            Flavor   = {{ vm.flavor }}
            Image    = {{ vm.image }}
            Network  = {{ vm.network | default('default-vnet') }}
            SSH User = {{ vm.sshUser }}

    - name: Créer le dossier Terraform
      file:
        path: "{{ tf_dir }}"
        state: directory

    - name: Cloner le code Terraform
      git:
        repo: "https://github.com/Tejagithub123/azure.git"
        dest: "{{ tf_dir }}"
        version: main
        depth: 1
        accept_hostkey: true
      environment:
        GIT_SSH_COMMAND: ssh -i /root/.ssh/id_rsa -o StrictHostKeyChecking=no

    - name: Rendre la config Terraform (Jinja2 → main.tf)
      template:
        src: "templates/main.tf.j2"
        dest: "{{ tf_dir }}/main.tf"

    - name: Initialiser Terraform
      command: terraform init
      args:
        chdir: "{{ tf_dir }}"

    - name: Plan Terraform
      command: terraform plan -out=plan.tfplan
      args:
        chdir: "{{ tf_dir }}"

    - name: Appliquer Terraform (provision)
      command: terraform apply -auto-approve plan.tfplan
      args:
        chdir: "{{ tf_dir }}"
      register: tf_apply

    - name: Afficher sortie Terraform
      debug:
        var: tf_apply.stdout

    - name: Récupérer IP publique Terraform
      command: terraform output -raw public_ip_address
      args:
        chdir: "{{ tf_dir }}"
      register: public_ip_output

    - name: Afficher l'IP publique
      debug:
        msg: "IP publique de la VM Azure : {{ public_ip_output.stdout }}"
