terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~>3.0"
    }
  }
  required_version = ">= 1.0.0"
}

provider "azurerm" {
  features {}

  subscription_id = "{{ subscription_id }}"
  client_id       = "{{ client_id }}"
  client_secret   = "{{ client_secret }}"
  tenant_id       = "{{ tenant_id }}"
}

resource "azurerm_resource_group" "rg" {
  name     = "{{ vm.name }}-rg"
  location = "{{ vm.location | default('East US') }}"
}

resource "azurerm_virtual_network" "vnet" {
  name                = "{{ vm.network }}-vnet"
  address_space       = ["{{ vm.network_cidr | default('10.0.0.0/16') }}"]
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
}

resource "azurerm_subnet" "subnet" {
  name                 = "{{ vm.network }}-subnet"
  resource_group_name  = azurerm_resource_group.rg.name
  virtual_network_name = azurerm_virtual_network.vnet.name
  address_prefixes     = ["{{ vm.subnet_cidr | default('10.0.1.0/24') }}"]
}

resource "azurerm_network_security_group" "ssh_nsg" {
  name                = "{{ vm.network }}-nsg"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
  security_rule {
    name                       = "Allow-SSH"
    priority                   = 1001
    direction                  = "Inbound"
    access                     = "Allow"
    protocol                   = "Tcp"
    source_port_range          = "*"
    destination_port_range     = "22"
    source_address_prefix      = "*"
    destination_address_prefix = "*"
  }
}

resource "azurerm_subnet_network_security_group_association" "assoc" {
  subnet_id                 = azurerm_subnet.subnet.id
  network_security_group_id = azurerm_network_security_group.ssh_nsg.id
}

resource "azurerm_public_ip" "public_ip" {
  name                = "{{ vm.name }}-public-ip"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
  sku                 = "Standard"
  allocation_method   = "Static"
}

resource "azurerm_network_interface" "nic" {
  name                = "{{ vm.name }}-nic"
  location            = azurerm_resource_group.rg.location
  resource_group_name = azurerm_resource_group.rg.name
  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.subnet.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.public_ip.id
  }
}

resource "azurerm_linux_virtual_machine" "vm" {
  name                  = "{{ vm.name }}"
  resource_group_name   = azurerm_resource_group.rg.name
  location              = azurerm_resource_group.rg.location
  size                  = "{{ vm.flavor }}"
  admin_username        = "{{ vm.sshUser }}"
  network_interface_ids = [azurerm_network_interface.nic.id]
  disable_password_authentication = true

  admin_ssh_key {
    username   = "{{ vm.sshUser }}"
    public_key = "{{ vm.keypair }}"
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
    name                 = "{{ vm.name }}-osdisk"
  }

 source_image_reference {
  {% if vm.image == 'CentosServer' %}
  publisher = "OpenLogic"
  offer     = "CentOS"
  sku       = "8_5-gen2"
  {% elif vm.image == 'RhelServer' %}
  publisher = "RedHat"
  offer     = "RHEL"
  sku       = "8-lvm-gen2"
  {% elif vm.image == 'UbuntuServer' %}
  publisher = "Canonical"
  offer     = "0001-com-ubuntu-server-jammy"
  sku       = "22_04-lts-gen2"
  {% else %}
  # fallback to Ubuntu if no match
  publisher = "Canonical"
  offer     = "0001-com-ubuntu-server-jammy"
  sku       = "22_04-lts-gen2"
  {% endif %}
  version = "latest"
}


custom_data = base64encode(<<EOF
#cloud-config
users:
  - name: {{ vm.sshUser }}
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    shell: /bin/bash
    ssh_authorized_keys:
      - {{ vm.keypair }}
EOF
  )
}





output "public_ip_address" {
  description = "The public IP address of the VM"
  value       = azurerm_public_ip.public_ip.ip_address
}
