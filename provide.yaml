---
- name: Create and Destroy Azure VM via Terraform
  hosts: localhost
  become: true
  vars:
    # Repo & paths
    repo_url: git@github.com:Tejagithub123/azure.git
    repo_dest: /home/{{ ansible_user }}/azure
    tf_working_dir: "{{ repo_dest }}"
    # Target host name or alias, and its IP
    target_host: terraform-host
    target_ip: 192.168.1.100
    target_user: ubuntu
    # SSH key path on control node (for add_host)
    ssh_key: /home/{{ ansible_user }}/.ssh/id_rsa

  tasks:
    - name: Add target VM to inventory
      add_host:
        name: "{{ target_host }}"
        ansible_host: "{{ target_ip }}"
        ansible_user: "{{ target_user }}"
        ansible_ssh_private_key_file: "{{ ssh_key }}"
        groups: terraform-host

- name: Provision on target VM
  hosts: terraform-host
  become: true
  tasks:
    - name: Ensure Git is installed
      package:
        name: git
        state: present

    - name: Check if Terraform is installed
      command: terraform version
      register: terraform_check
      ignore_errors: true

    - name: Add HashiCorp GPG key
      apt_key:
        url: https://apt.releases.hashicorp.com/gpg
        state: present
      when: terraform_check.rc != 0

    - name: Add HashiCorp repository
      apt_repository:
        repo: "deb [arch=amd64] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
        state: present
      when: terraform_check.rc != 0

    - name: Update apt cache if adding repo
      apt:
        update_cache: yes
      when: terraform_check.rc != 0

    - name: Install Terraform
      apt:
        name: terraform
        state: present
      when: terraform_check.rc != 0

    - name: Clone (or update) your Terraform repo
      git:
        repo: "{{ repo_url }}"
        dest: "{{ repo_dest }}"
        version: main
        force: yes

    - name: Initialize & apply Terraform (create resources)
      community.general.terraform:
        project_path: "{{ tf_working_dir }}"
        executable: terraform
        force_init: true
        state: present
        terraform_init: true
        terraform_plan: true
        terraform_apply: true
        apply_args: "-auto-approve"

    - name: Grab Terraform outputs (JSON)
      command: terraform output -json
      args:
        chdir: "{{ tf_working_dir }}"
      register: tf_output

    - name: Parse the VM IP from Terraform output
      set_fact:
        vm_ip: "{{ (tf_output.stdout | from_json).vm_ip.value }}"

    - name: Show the newly created VM IP
      debug:
        msg: "Azure VM public IP is {{ vm_ip }}"

    - name: Pause for 2 minutes (optional)
      pause:
        seconds: 120

    - name: Destroy all Terraform-managed resources
      community.general.terraform:
        project_path: "{{ tf_working_dir }}"
        executable: terraform
        state: absent
        force_init: true
        terraform_destroy: true
        destroy_args: "-auto-approve"
